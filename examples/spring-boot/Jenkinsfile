pipeline {
    agent any
    environment {
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
        BASEDIR = 'examples/spring-boot'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '1'))
        disableConcurrentBuilds()
    }
    stages {
        stage('checkout') {
            steps {
                sh 'git config --global http.sslVerify false'
                git branch: env.BRANCH_NAME, url: 'https://github.com/gitaroktato/being-agile-with-modern-java'

            }
        }
        stage('prepare') {
            steps {
               dir(BASEDIR) {
                    echo 'Configuring gradle'
                    sh "chmod u+x ./gradlew"
                    echo 'Configuring docker-compose'
                    script {
                        def exists = fileExists '$HOME/docker-compose'
                        if (exists) {
                            echo 'Skipping docker-compose installation'
                        } else {
                            sh "curl -L --fail https://github.com/docker/compose/releases/download/1.25.3/run.sh -o $HOME/docker-compose"
                            sh "chmod u+x $HOME/docker-compose"
                        }
                    }
                    echo 'Configuring Taurus'
                    sh "docker build -t bzt src/e2e/taurus"
                    echo 'Configuring wait-for-it'
                    script {
                        def exists = fileExists '$HOME/wait-for-it.sh'
                        if (exists) {
                            echo 'Skipping wait-for-it installation'
                        } else {
                            sh "curl -L --fail https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -o $HOME/wait-for-it.sh"
                            sh "chmod u+x $HOME/wait-for-it.sh"
                        }
                    }
               }
            }
        }
        stage('test') {
            steps {
                echo "Deploying to us-west-2"
            }
        }
        stage('verify') {
            steps {
                echo "Deploying to us-west-2"
            }
        }
        stage('package') {
            steps {
                echo "Deploying to us-west-2"
            }
        }
        stage('deploy to lab') {
            failFast true
            parallel {
                stage('us-west-2') {
                    input {
                        message "Deploy to us-west-2?"
                        ok "Deploy"
                    }
                    steps {
                        sh "docker run --rm -d -p8082:80 --network lab traefik/whoami"
                    }
                }
            }
        }
        stage('integration-test') {
            failFast true
            parallel {
                stage('us-west-2') {
                    steps {
                        sh "curl http://docker:8082"
                    }
                }
            }
        }
        stage('deploy to prod') {
            failFast true
            parallel {
                stage('us-west-2') {
                    input {
                        message "Deploy to us-west-2?"
                        ok "Deploy"
                    }
                    steps {
                        sh "docker run --rm -d -p8083:80 --network prod traefik/whoami"
                    }
                }
            }
        }
        stage('production-test') {
            failFast true
            parallel {
                stage('us-west-2') {
                    steps {
                        sh "curl http://docker:8083"
                    }
                }
            }
        }
    }
    post {
        cleanup {
            dir(BASEDIR) {
                script {
                    try {
                        echo 'Removing all containers'
                        sh 'docker ps -aq | xargs docker rm -f'
                    } catch (err) {
                        echo "Removing container failed: ${err}"
                    }
                }
                sh 'git clean -df'
            }
        }
    }
}